- name: "Keycloak | Assert variables"
  assert:
    that:
      - (keycloak_auth_url is defined) and (keycloak_auth_url|length > 0)
      - (keycloak_admin_username is defined) and (keycloak_admin_username|length > 0)
      - (keycloak_default_user_password is defined) and (keycloak_default_user_password|length > 0)
      - (consul_scheme is defined) and (consul_scheme|length > 0)
      - (consul_host is defined) and (consul_host|length > 0)
      - (consul_port is defined) and (consul_port|length > 0)

- name: "Keycloak | Config"
  block:
  - name: "Keycloak | Check if config exists in Consul"
    community.general.consul_kv:
      scheme: "{{ consul_scheme }}"
      host: "{{ consul_host }}"
      port: "{{ consul_port }}"
      token: "{{ consul_token }}"
      key: "config/keycloak/data"
    register: keycloak_config_consul

  - set_fact:
      keycloak_config: "{{ keycloak_config_consul.data.Value | from_yaml }}"
    when: keycloak_config_consul.data.Value is defined

  - name: "Keycloak | Create config"
    block:
    - name: "Keycloak | Create admin password"
      set_fact:
        KEYCLOAK_ADMIN_PASSWORD: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'ascii_uppercase', 'digits'], length=24) }}"
      when: (KEYCLOAK_ADMIN_PASSWORD is not defined) or (KEYCLOAK_ADMIN_PASSWORD | default([]) | length == 0)
    - name: "Keycloak | Create database password"
      set_fact:
        KEYCLOAK_DATABASE_PASSWORD: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'ascii_uppercase', 'digits'], length=24) }}"
      when: (KEYCLOAK_DATABASE_PASSWORD is not defined) or (KEYCLOAK_DATABASE_PASSWORD | default([]) | length == 0)
    - name: "Keycloak | Update keycloak_config dictionary and override default values"
      set_fact:
        keycloak_config: "{{ keycloak_config | combine(
        { 'hostname': '{{ SLM_HOSTNAME }}',
          'admin': {
            'password': '{{ KEYCLOAK_ADMIN_PASSWORD }}'
          },
          'database': {
            'password': '{{ KEYCLOAK_DATABASE_PASSWORD }}'
          }
        }
        , recursive=true) }}"
    - name: "Keycloak | Store Keycloak config in Consul"
      community.general.consul_kv:
        scheme: "{{ consul_scheme }}"
        host: "{{ consul_host }}"
        port: "{{ consul_port }}"
        token: "{{ consul_token }}"
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      with_items:
        - { key: "config/keycloak/data", value: "{{ keycloak_config | to_yaml }}"  }
    when: keycloak_config_consul.data.Value is not defined

- name: "Keycloak | Start"
  block:
    - name: "Keycloak | Create compose definition from template"
      set_fact:
        keycloak_compose: "{{ lookup('template', './templates/base.keycloak.yml') }}"
    - name: "Keycloak | Start containers"
      community.docker.docker_compose:
        project_name: eclipse-slm
        definition: "{{ keycloak_compose | from_yaml}}"
    - name: "Keycloak | Wait for Keycloak being up"
      uri:
        url: "{{ keycloak_auth_url }}"
        status_code: 200
      register: result
      until: result.status == 200
      retries: 120
      delay: 3

- name: "Keycloak | Init"
  block:
  - name: "Keycloak | Get admin access token"
    include_role:
      name: keycloak/keycloak_client
      tasks_from: authentication/get_admin_access_token.yml

  - name: "Keycloak | Create realms"
    include_role:
      name: "keycloak/keycloak_init"
      tasks_from: create_realms.yml

  - name: "Keycloak | Create clients"
    include_role:
      name: "keycloak/keycloak_init"
      tasks_from: create_clients.yml

  - name: "Keycloak | Create roles"
    include_role:
      name: "keycloak/keycloak_init"
      tasks_from: create_roles.yml

  - name: "Keycloak | Create users"
    include_role:
      name: "keycloak/keycloak_init"
      tasks_from: create_users.yml

  - name: "Keycloak | Get client secret of awx-jwt-authenticator"
    block:
      - include_role:
          name: keycloak/keycloak_client
          tasks_from: clients/get_client_secret.yml
        vars:
          client_id: awx_jwt_authenticator
      - set_fact:
          awx_jwt_authenticator_keycloak_secret_id: "{{ client_secret }}"

- name: "Keycloak | Store config"
  include_role:
    name: keycloak/keycloak_init
    tasks_from: store_config.yml
