- name: "AWX | Store config in Consul"
  block:
    - name: "AWX | Check if config exists in Consul"
      community.general.consul_kv:
        scheme: "{{ consul_scheme }}"
        host: "{{ consul_host }}"
        port: "{{ consul_port }}"
        token: "{{ consul_token }}"
        key: "config/awx/data"
      register: awx_config_consul_response
    - set_fact:
        awx_config: "{{ awx_config | combine(awx_config_consul_response.data.Value | from_yaml, recursive=true) }}"
      when: awx_config_consul_response.data.Value is defined
    - name: "AWX | Update config dictionary and override default values"
      set_fact:
        awx_config: "{{ awx_config | combine(
          { 'consul': {
              'token': consul_token | b64encode
            }
          }, recursive=true) }}"
    - name: "AWX | Create passwords"
      block:
      - name: "AWX | Create AWX admin password"
        set_fact:
          AWX_ADMIN_PASSWORD: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'ascii_uppercase', 'digits'], length=24) }}"
        when: (awx_config.admin.password is not defined) or (awx_config.admin.password | length == 0)
      - name: "AWX | Update config dictionary and override default values"
        set_fact:
          awx_config: "{{ awx_config | combine(
            { 'admin': {
                'password': AWX_ADMIN_PASSWORD
              }
            }, recursive=true) }}"
        when: (awx_config.admin.password is not defined) or (awx_config.admin.password | length == 0)

      - name: "AWX | Create AWX JWT Authenticator password"
        set_fact:
          awx_jwt_authenticator_password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'ascii_uppercase', 'digits'], length=24) }}"
        when: (awx_config.jwt_authenticator.password is not defined) or (awx_config.jwt_authenticator.password | length == 0)
      - name: "AWX | Update config dictionary and override default values"
        set_fact:
          awx_config: "{{ awx_config | combine(
            { 'jwt_authenticator': {
                'password': awx_jwt_authenticator_password
              }
            }, recursive=true) }}"
        when: (awx_config.jwt_authenticator.password is not defined) or (awx_config.jwt_authenticator.password | length == 0)

    - name: "AWX | Store AWX config in Consul"
      community.general.consul_kv:
        scheme: "{{ consul_scheme }}"
        host: "{{ consul_host }}"
        port: "{{ consul_port }}"
        token: "{{ consul_token }}"
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      with_items:
        - { key: "config/awx/data", value: "{{ awx_config | to_yaml }}" }
    - name: "AWX | Decode Consul token"
      set_fact:
        awx_config: "{{ awx_config | combine(
          { 'consul': {
              'token': awx_config.consul.token | b64decode
            }
          }, recursive=true) }}"


- name: "AWX | Start"
  block:
    - set_fact:
        awx_url: "{{ awx_scheme }}://{{ awx_host }}:{{ awx_port }}"
    - name: "AWX | Create compose definition from template"
      set_fact:
        awx_compose: "{{ lookup('template', './templates/base.awx.yml') }}"
    - name: "AWX | Start containers"
      community.docker.docker_compose:
        project_name: eclipse-slm
        definition: "{{ awx_compose | from_yaml}}"
    - name: "AWX | Wait for AWX being up"
      uri:
        url: "{{ awx_url }}"
        status_code: 200
      register: result
      until: result.status == 200
      retries: 120
      delay: 3

- name: "AWX | Init"
  include_role:
    name: awx_init
    tasks_from: awx_load_data.yml
