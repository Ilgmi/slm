package org.eclipse.slm.service_management.service.rest.service_offerings;

import org.eclipse.slm.common.utils.objectmapper.ObjectMapperUtils;
import org.eclipse.slm.service_management.service.rest.service_categories.ServiceCategoryHandler;
import org.eclipse.slm.service_management.service.rest.service_categories.ServiceCategoryNotFoundException;
import org.eclipse.slm.service_management.model.offerings.ServiceOffering;
import org.eclipse.slm.service_management.model.offerings.ServiceOfferingCreateOrUpdateRequest;
import org.eclipse.slm.service_management.model.offerings.ServiceOfferingGitRepository;
import org.eclipse.slm.service_management.model.offerings.exceptions.ServiceOfferingNotFoundException;
import org.eclipse.slm.service_management.model.offerings.exceptions.ServiceOfferingVersionCreateException;
import org.eclipse.slm.service_management.model.offerings.exceptions.ServiceOfferingVersionNotFoundException;
import org.eclipse.slm.service_management.model.vendors.exceptions.ServiceVendorNotFoundException;
import org.eclipse.slm.service_management.persistence.api.ServiceOfferingJpaRepository;
import org.eclipse.slm.service_management.persistence.api.ServiceVendorJpaRepository;
import org.eclipse.slm.service_management.service.rest.service_vendors.ServiceVendorHandler;
import org.apache.commons.codec.binary.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.UUID;

@Component
public class ServiceOfferingHandler {

    private static final Logger LOG = LoggerFactory.getLogger(ServiceOfferingHandler.class);

    private final ServiceOfferingJpaRepository serviceOfferingJpaRepository;

    private final ServiceVendorJpaRepository serviceVendorJpaRepository;

    private final ServiceVendorHandler serviceVendorHandler;

    private final ServiceCategoryHandler serviceCategoryHandler;

    private final ServiceOfferingGitUpdater serviceOfferingGitUpdater;


    public ServiceOfferingHandler(ServiceOfferingJpaRepository serviceOfferingJpaRepository,
                                  ServiceVendorJpaRepository serviceVendorJpaRepository,
                                  ServiceVendorHandler serviceVendorHandler,
                                  ServiceCategoryHandler serviceCategoryHandler, ServiceOfferingGitUpdater serviceOfferingGitUpdater) {
        this.serviceOfferingJpaRepository = serviceOfferingJpaRepository;
        this.serviceVendorJpaRepository = serviceVendorJpaRepository;
        this.serviceVendorHandler = serviceVendorHandler;
        this.serviceCategoryHandler = serviceCategoryHandler;
        this.serviceOfferingGitUpdater = serviceOfferingGitUpdater;
    }

    public List<ServiceOffering> getServiceOfferings(UUID serviceVendorIdFilter) {
        List<ServiceOffering> serviceOfferings;
        if (serviceVendorIdFilter != null) {
            serviceOfferings = serviceOfferingJpaRepository.findByServiceVendorId(serviceVendorIdFilter);
        }
        else {
            serviceOfferings = serviceOfferingJpaRepository.findAll();
        }

        return serviceOfferings;
    }

    public ServiceOffering getServiceOfferingById(UUID serviceOfferingId) throws ServiceOfferingNotFoundException {
        var serviceOfferingOptional = serviceOfferingJpaRepository.findById(serviceOfferingId);
        if (serviceOfferingOptional.isPresent()) {
            return serviceOfferingOptional.get();
        }
        else {
            throw new ServiceOfferingNotFoundException(serviceOfferingId);
        }
    }

    public String getServiceOfferingCoverImageAsBase64(UUID serviceOfferingId) {
        var serviceOffering = serviceOfferingJpaRepository.findById(serviceOfferingId).get();

        Base64 base64 = new Base64();
        String base64EncodedImage = "";
        var imageBytes = serviceOffering.getCoverImage();
        if (imageBytes != null) {
            base64EncodedImage = new String(base64.encode(imageBytes));
        }

        return base64EncodedImage;
    }

    public ServiceOffering saveServiceOffering(ServiceOffering serviceOffering) {
        serviceOffering = this.serviceOfferingJpaRepository.save(serviceOffering);
        return serviceOffering;
    }

    public ServiceOffering createServiceOfferingWithAutoGeneratedId(ServiceOfferingCreateOrUpdateRequest serviceOfferingCreateOrUpdateRequest)
            throws ServiceVendorNotFoundException, ServiceCategoryNotFoundException {
        serviceOfferingCreateOrUpdateRequest.setId(UUID.randomUUID());

        return this.createOrUpdateServiceOfferingWithId(serviceOfferingCreateOrUpdateRequest);
    }

    public ServiceOfferingGitRepository addServiceOfferingWithAutoGeneratedIdFromGitRepo(ServiceOfferingGitRepository serviceOfferingGitRepository)
            throws ServiceVendorNotFoundException, ServiceOfferingVersionCreateException, ServiceOfferingNotFoundException, ServiceCategoryNotFoundException, ServiceOfferingVersionNotFoundException {
        var serviceVendorOptional = serviceVendorJpaRepository.findById(serviceOfferingGitRepository.getServiceVendorId());
        if (serviceVendorOptional.isPresent()) {
            serviceOfferingGitRepository = this.serviceOfferingGitUpdater.initServiceOfferingFromGitRepo(serviceOfferingGitRepository);

            return serviceOfferingGitRepository;
        }
        else {
            throw new ServiceVendorNotFoundException(serviceOfferingGitRepository.getServiceVendorId());
        }
    }

    public ServiceOffering createOrUpdateServiceOfferingWithId(ServiceOfferingCreateOrUpdateRequest serviceOfferingCreateOrUpdateRequest)
            throws ServiceVendorNotFoundException, ServiceCategoryNotFoundException {
        // Get service vendor
        var serviceVendor = this.serviceVendorHandler
                .getServiceVendorById(serviceOfferingCreateOrUpdateRequest.getServiceVendorId());
        // Get service category
        var serviceCategory = this.serviceCategoryHandler
                .getServiceCategoryById(serviceOfferingCreateOrUpdateRequest.getServiceCategoryId());

        ServiceOffering serviceOffering;
        var savedServiceOfferingOptional = this.serviceOfferingJpaRepository
                .findById(serviceOfferingCreateOrUpdateRequest.getId());
        if (savedServiceOfferingOptional.isPresent()) {
            var savedServiceOffering = savedServiceOfferingOptional.get();
            serviceOffering = ObjectMapperUtils.map(serviceOfferingCreateOrUpdateRequest, savedServiceOffering);
        }
        else {
            serviceOffering = ObjectMapperUtils.map(serviceOfferingCreateOrUpdateRequest, ServiceOffering.class);
        }

        serviceOffering.setServiceVendor(serviceVendor);
        serviceOffering.setServiceCategory(serviceCategory);
        this.serviceOfferingJpaRepository.save(serviceOffering);

        if (savedServiceOfferingOptional.isPresent()) {
            LOG.info("Service offering " + serviceOffering+ " updated");
        }
        else {
            LOG.info("Service offering " + serviceOffering + " created");
        }

        return serviceOffering;
    }

    public void deleteServiceOfferingById(UUID serviceOfferingId) throws ServiceOfferingNotFoundException {
        var serviceOffering = this.getServiceOfferingById(serviceOfferingId);

        if (serviceOffering.getGitRepository() != null) {
            this.serviceOfferingGitUpdater.removeServiceOfferingGitRepository(serviceOffering.getGitRepository());
        }

        this.serviceOfferingJpaRepository.delete(serviceOffering);
        LOG.info("Service offering " + serviceOffering + " deleted");
    }
}
