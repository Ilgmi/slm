package org.eclipse.slm.service_management.service.rest.service_offerings;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.eclipse.slm.common.model.DeploymentType;
import org.eclipse.slm.common.utils.objectmapper.ObjectMapperUtils;
import org.eclipse.slm.service_management.model.offerings.ServiceOfferingCreateOrUpdateRequest;
import org.eclipse.slm.service_management.model.offerings.ServiceOfferingDTOApi;
import org.eclipse.slm.service_management.model.offerings.ServiceOfferingGitRepository;
import org.eclipse.slm.service_management.model.offerings.exceptions.ServiceOfferingNotFoundException;
import org.eclipse.slm.service_management.model.offerings.exceptions.ServiceOfferingVersionCreateException;
import org.eclipse.slm.service_management.model.offerings.exceptions.ServiceOfferingVersionNotFoundException;
import org.eclipse.slm.service_management.model.vendors.exceptions.ServiceVendorNotFoundException;
import org.eclipse.slm.service_management.service.rest.service_categories.ServiceCategoryNotFoundException;
import org.eclipse.slm.service_management.model.offerings.responses.ServiceOfferingCreateResponse;
import io.swagger.v3.oas.annotations.Operation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@RestController
@RequestMapping("/services/offerings")
public class ServiceOfferingRestController {

    private static final Logger Log = LoggerFactory.getLogger(ServiceOfferingRestController.class);

    private final ServiceOfferingHandler serviceOfferingHandler;

    public ServiceOfferingRestController(ServiceOfferingHandler serviceOfferingHandler) {
        this.serviceOfferingHandler = serviceOfferingHandler;
    }

    @RequestMapping(value = "", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Get service offerings")
    public ResponseEntity<List<ServiceOfferingDTOApi>> getServiceOfferings(
            @RequestParam(name = "withImage", defaultValue = "false") boolean withImage,
            @RequestParam(name = "filterByServiceVendorId", required = false) UUID serviceVendorIdFilter
    )
            throws JsonProcessingException {
        var serviceOfferings = this.serviceOfferingHandler.getServiceOfferings(serviceVendorIdFilter);
        for (var serviceOffering : serviceOfferings) {
            if (!withImage) {
                serviceOffering.setCoverImage(null);
            }
        }
        var serviceOfferingsDTOApi = ObjectMapperUtils.mapAll(serviceOfferings, ServiceOfferingDTOApi.class);

        return ResponseEntity.ok(serviceOfferingsDTOApi);
    }

    @RequestMapping(value = "/{serviceOfferingId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Get service offering by id")
    public ResponseEntity<ServiceOfferingDTOApi> getServiceOfferingById(
            @PathVariable(name = "serviceOfferingId") UUID serviceOfferingId,
            @RequestParam(name = "withImage", defaultValue = "false") boolean withImage)
            throws ServiceOfferingNotFoundException {
        var serviceOffering = this.serviceOfferingHandler.getServiceOfferingById(serviceOfferingId);
        if (!withImage) {
            serviceOffering.setCoverImage(null);
        }
        var serviceOfferingDTOApi = ObjectMapperUtils.map(serviceOffering, ServiceOfferingDTOApi.class);

        return ResponseEntity.ok(serviceOfferingDTOApi);
    }

    @RequestMapping(value = "", method = RequestMethod.POST)
    @Operation(summary = "Create new service offering")
    public ResponseEntity<ServiceOfferingCreateResponse> createServiceOfferingWithAutoGeneratedId(
            @RequestBody ServiceOfferingCreateOrUpdateRequest serviceOfferingCreateOrUpdateRequest)
            throws ServiceVendorNotFoundException, ServiceCategoryNotFoundException {
        var serviceOffering = this.serviceOfferingHandler.createServiceOfferingWithAutoGeneratedId(serviceOfferingCreateOrUpdateRequest);

        return ResponseEntity.ok(new ServiceOfferingCreateResponse(serviceOffering));
    }

    @RequestMapping(value = "/{serviceOfferingId}", method = RequestMethod.PUT)
    @Operation(summary = "Create new service offering with specified id or update existing one")
    public ResponseEntity<ServiceOfferingCreateResponse> createOrUpdateServiceOfferingWithId(
            @PathVariable(name = "serviceOfferingId") UUID serviceOfferingId,
            @RequestBody ServiceOfferingCreateOrUpdateRequest serviceOfferingCreateOrUpdateRequest)
            throws ServiceVendorNotFoundException, ServiceCategoryNotFoundException {
        serviceOfferingCreateOrUpdateRequest.setId(serviceOfferingId);
        var serviceOffering = this.serviceOfferingHandler.createOrUpdateServiceOfferingWithId(serviceOfferingCreateOrUpdateRequest);

        return ResponseEntity.ok(new ServiceOfferingCreateResponse(serviceOffering));
    }

    @RequestMapping(value = "/{serviceOfferingId}", method = RequestMethod.DELETE)
    @Operation(summary = "Delete service offering")
    public @ResponseBody ResponseEntity<Void> deleteServiceOffering(@PathVariable(name = "serviceOfferingId") UUID serviceOfferingId)
            throws ServiceOfferingNotFoundException {
        this.serviceOfferingHandler.deleteServiceOfferingById(serviceOfferingId);
        return ResponseEntity.ok().build();
    }

    @RequestMapping(value = "/deploymenttypes", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Get possible deployment types")
    public ResponseEntity<DeploymentType[]> getDeploymentTypes() {
        return ResponseEntity.ok(DeploymentType.values());
    }

    @RequestMapping(value = "/{serviceOfferingId}/cover", method = RequestMethod.GET, produces = MediaType.IMAGE_PNG_VALUE)
    public ResponseEntity<String> getServiceOfferingCover(@PathVariable(name = "serviceOfferingId") UUID serviceOfferingId) {
        var coverImage = this.serviceOfferingHandler.getServiceOfferingCoverImageAsBase64(serviceOfferingId);
        return ResponseEntity.ok().body(coverImage);
    }

    @RequestMapping(value = "/git", method = RequestMethod.POST)
    @Operation(summary = "Create new service offering from a git repository")
    public ResponseEntity<Map<String, UUID>> addServiceOfferingWithAutoGeneratedIdFromGitRepo
            (@RequestBody ServiceOfferingGitRepository serviceOfferingGitRepository)
            throws ServiceVendorNotFoundException, ServiceOfferingVersionCreateException, ServiceOfferingNotFoundException, ServiceCategoryNotFoundException, ServiceOfferingVersionNotFoundException {

        serviceOfferingGitRepository = this.serviceOfferingHandler.addServiceOfferingWithAutoGeneratedIdFromGitRepo(serviceOfferingGitRepository);

        var versionNamesToIds = new HashMap<String, UUID>();
        for (var serviceOfferingVersion : serviceOfferingGitRepository.getServiceOffering().getVersions()) {
            versionNamesToIds.put(serviceOfferingVersion.getVersion(), serviceOfferingVersion.getId());
        }

        return ResponseEntity.ok().body(versionNamesToIds);
    }

}
